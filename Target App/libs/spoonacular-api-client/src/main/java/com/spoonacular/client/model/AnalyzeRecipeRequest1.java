/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular.client.model;

import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class AnalyzeRecipeRequest1 {
  
  @SerializedName("title")
  private String title = null;
  @SerializedName("servings")
  private Integer servings = null;
  @SerializedName("ingredients")
  private List<String> ingredients = null;
  @SerializedName("instructions")
  private String instructions = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getServings() {
    return servings;
  }
  public void setServings(Integer servings) {
    this.servings = servings;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<String> getIngredients() {
    return ingredients;
  }
  public void setIngredients(List<String> ingredients) {
    this.ingredients = ingredients;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getInstructions() {
    return instructions;
  }
  public void setInstructions(String instructions) {
    this.instructions = instructions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeRecipeRequest1 analyzeRecipeRequest1 = (AnalyzeRecipeRequest1) o;
    return (this.title == null ? analyzeRecipeRequest1.title == null : this.title.equals(analyzeRecipeRequest1.title)) &&
        (this.servings == null ? analyzeRecipeRequest1.servings == null : this.servings.equals(analyzeRecipeRequest1.servings)) &&
        (this.ingredients == null ? analyzeRecipeRequest1.ingredients == null : this.ingredients.equals(analyzeRecipeRequest1.ingredients)) &&
        (this.instructions == null ? analyzeRecipeRequest1.instructions == null : this.instructions.equals(analyzeRecipeRequest1.instructions));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.title == null ? 0: this.title.hashCode());
    result = 31 * result + (this.servings == null ? 0: this.servings.hashCode());
    result = 31 * result + (this.ingredients == null ? 0: this.ingredients.hashCode());
    result = 31 * result + (this.instructions == null ? 0: this.instructions.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeRecipeRequest1 {\n");
    
    sb.append("  title: ").append(title).append("\n");
    sb.append("  servings: ").append(servings).append("\n");
    sb.append("  ingredients: ").append(ingredients).append("\n");
    sb.append("  instructions: ").append(instructions).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
